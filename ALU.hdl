// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.

    // zx chip
    Not(in=zx, out=notzx);
    And16(
        a=x,
        b[0]=notzx,
        b[1]=notzx,
        b[2]=notzx,
        b[3]=notzx,
        b[4]=notzx,
        b[5]=notzx,
        b[6]=notzx,
        b[7]=notzx,
        b[8]=notzx,
        b[9]=notzx,
        b[10]=notzx,
        b[11]=notzx,
        b[12]=notzx,
        b[13]=notzx,
        b[14]=notzx,
        b[15]=notzx,
        out[0]=outnx0,
        out[1]=outnx1,
        out[2]=outnx2,
        out[3]=outnx3,
        out[4]=outnx4,
        out[5]=outnx5,
        out[6]=outnx6,
        out[7]=outnx7,
        out[8]=outnx8,
        out[9]=outnx9,
        out[10]=outnx10,
        out[11]=outnx11,
        out[12]=outnx12,
        out[13]=outnx13,
        out[14]=outnx14,
        out[15]=outnx15,
    );

    // nx chip
    Xor(a=outnx0, b=nx, out=negx0);
    Xor(a=outnx1, b=nx, out=negx1);
    Xor(a=outnx2, b=nx, out=negx2);
    Xor(a=outnx3, b=nx, out=negx3);
    Xor(a=outnx4, b=nx, out=negx4);
    Xor(a=outnx5, b=nx, out=negx5);
    Xor(a=outnx6, b=nx, out=negx6);
    Xor(a=outnx7, b=nx, out=negx7);
    Xor(a=outnx8, b=nx, out=negx8);
    Xor(a=outnx9, b=nx, out=negx9);
    Xor(a=outnx10, b=nx, out=negx10);
    Xor(a=outnx11, b=nx, out=negx11);
    Xor(a=outnx12, b=nx, out=negx12);
    Xor(a=outnx13, b=nx, out=negx13);
    Xor(a=outnx14, b=nx, out=negx14);
    Xor(a=outnx15, b=nx, out=negx15);

    Add16(
        a[0]=negx0, b[0]=nx,
        a[1]=negx1,
        a[2]=negx2,
        a[3]=negx3,
        a[4]=negx4,
        a[5]=negx5,
        a[6]=negx6,
        a[7]=negx7,
        a[8]=negx8,
        a[9]=negx9,
        a[10]=negx10,
        a[11]=negx11,
        a[12]=negx12,
        a[13]=negx13,
        a[14]=negx14,
        a[15]=negx15,
        out=out
    );
}