// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.

    // zx chip
    Not(in=zx, out=notzx);
    And16(
        a=x,
        b[0]=notzx,
        b[1]=notzx,
        b[2]=notzx,
        b[3]=notzx,
        b[4]=notzx,
        b[5]=notzx,
        b[6]=notzx,
        b[7]=notzx,
        b[8]=notzx,
        b[9]=notzx,
        b[10]=notzx,
        b[11]=notzx,
        b[12]=notzx,
        b[13]=notzx,
        b[14]=notzx,
        b[15]=notzx,
        out[0]=outnx0,
        out[1]=outnx1,
        out[2]=outnx2,
        out[3]=outnx3,
        out[4]=outnx4,
        out[5]=outnx5,
        out[6]=outnx6,
        out[7]=outnx7,
        out[8]=outnx8,
        out[9]=outnx9,
        out[10]=outnx10,
        out[11]=outnx11,
        out[12]=outnx12,
        out[13]=outnx13,
        out[14]=outnx14,
        out[15]=outnx15,
    );

    // nx chip
    Xor(a=outnx0, b=nx, out=negx0);
    Xor(a=outnx1, b=nx, out=negx1);
    Xor(a=outnx2, b=nx, out=negx2);
    Xor(a=outnx3, b=nx, out=negx3);
    Xor(a=outnx4, b=nx, out=negx4);
    Xor(a=outnx5, b=nx, out=negx5);
    Xor(a=outnx6, b=nx, out=negx6);
    Xor(a=outnx7, b=nx, out=negx7);
    Xor(a=outnx8, b=nx, out=negx8);
    Xor(a=outnx9, b=nx, out=negx9);
    Xor(a=outnx10, b=nx, out=negx10);
    Xor(a=outnx11, b=nx, out=negx11);
    Xor(a=outnx12, b=nx, out=negx12);
    Xor(a=outnx13, b=nx, out=negx13);
    Xor(a=outnx14, b=nx, out=negx14);
    Xor(a=outnx15, b=nx, out=negx15);

    // zy chip
    Not(in=zy, out=notzy);
    And16(
        a=y,
        b[0]=notzy,
        b[1]=notzy,
        b[2]=notzy,
        b[3]=notzy,
        b[4]=notzy,
        b[5]=notzy,
        b[6]=notzy,
        b[7]=notzy,
        b[8]=notzy,
        b[9]=notzy,
        b[10]=notzy,
        b[11]=notzy,
        b[12]=notzy,
        b[13]=notzy,
        b[14]=notzy,
        b[15]=notzy,
        out[0]=outny0,
        out[1]=outny1,
        out[2]=outny2,
        out[3]=outny3,
        out[4]=outny4,
        out[5]=outny5,
        out[6]=outny6,
        out[7]=outny7,
        out[8]=outny8,
        out[9]=outny9,
        out[10]=outny10,
        out[11]=outny11,
        out[12]=outny12,
        out[13]=outny13,
        out[14]=outny14,
        out[15]=outny15,
    );

    // ny chip
    Xor(a=outny0, b=ny, out=negy0);
    Xor(a=outny1, b=ny, out=negy1);
    Xor(a=outny2, b=ny, out=negy2);
    Xor(a=outny3, b=ny, out=negy3);
    Xor(a=outny4, b=ny, out=negy4);
    Xor(a=outny5, b=ny, out=negy5);
    Xor(a=outny6, b=ny, out=negy6);
    Xor(a=outny7, b=ny, out=negy7);
    Xor(a=outny8, b=ny, out=negy8);
    Xor(a=outny9, b=ny, out=negy9);
    Xor(a=outny10, b=ny, out=negy10);
    Xor(a=outny11, b=ny, out=negy11);
    Xor(a=outny12, b=ny, out=negy12);
    Xor(a=outny13, b=ny, out=negy13);
    Xor(a=outny14, b=ny, out=negy14);
    Xor(a=outny15, b=ny, out=negy15);

    // x + y vs x & y
    Not(in=f, out=notf);

    And16(
        a[0]=negx0,
        a[1]=negx1,
        a[2]=negx2,
        a[3]=negx3,
        a[4]=negx4,
        a[5]=negx5,
        a[6]=negx6,
        a[7]=negx7,
        a[8]=negx8,
        a[9]=negx9,
        a[10]=negx10,
        a[11]=negx11,
        a[12]=negx12,
        a[13]=negx13,
        a[14]=negx14,
        a[15]=negx15,
        b[0]=f,
        b[1]=f,
        b[2]=f,
        b[3]=f,
        b[4]=f,
        b[5]=f,
        b[6]=f,
        b[7]=f,
        b[8]=f,
        b[9]=f,
        b[10]=f,
        b[11]=f,
        b[12]=f,
        b[13]=f,
        b[14]=f,
        b[15]=f,
        out=xandf
    );

    And16(
        a[0]=negy0,
        a[1]=negy1,
        a[2]=negy2,
        a[3]=negy3,
        a[4]=negy4,
        a[5]=negy5,
        a[6]=negy6,
        a[7]=negy7,
        a[8]=negy8,
        a[9]=negy9,
        a[10]=negy10,
        a[11]=negy11,
        a[12]=negy12,
        a[13]=negy13,
        a[14]=negy14,
        a[15]=negy15,
        b[0]=f,
        b[1]=f,
        b[2]=f,
        b[3]=f,
        b[4]=f,
        b[5]=f,
        b[6]=f,
        b[7]=f,
        b[8]=f,
        b[9]=f,
        b[10]=f,
        b[11]=f,
        b[12]=f,
        b[13]=f,
        b[14]=f,
        b[15]=f,
        out=yandf
    );

    Add16(a=xandf, b=yandf, out=outAdd);

    And16(
        a[0]=negx0,
        a[1]=negx1,
        a[2]=negx2,
        a[3]=negx3,
        a[4]=negx4,
        a[5]=negx5,
        a[6]=negx6,
        a[7]=negx7,
        a[8]=negx8,
        a[9]=negx9,
        a[10]=negx10,
        a[11]=negx11,
        a[12]=negx12,
        a[13]=negx13,
        a[14]=negx14,
        a[15]=negx15,
        b[0]=notf,
        b[1]=notf,
        b[2]=notf,
        b[3]=notf,
        b[4]=notf,
        b[5]=notf,
        b[6]=notf,
        b[7]=notf,
        b[8]=notf,
        b[9]=notf,
        b[10]=notf,
        b[11]=notf,
        b[12]=notf,
        b[13]=notf,
        b[14]=notf,
        b[15]=notf,
        out=xandNotf
    );

    And16(
        a[0]=negy0,
        a[1]=negy1,
        a[2]=negy2,
        a[3]=negy3,
        a[4]=negy4,
        a[5]=negy5,
        a[6]=negy6,
        a[7]=negy7,
        a[8]=negy8,
        a[9]=negy9,
        a[10]=negy10,
        a[11]=negy11,
        a[12]=negy12,
        a[13]=negy13,
        a[14]=negy14,
        a[15]=negy15,
        b[0]=notf,
        b[1]=notf,
        b[2]=notf,
        b[3]=notf,
        b[4]=notf,
        b[5]=notf,
        b[6]=notf,
        b[7]=notf,
        b[8]=notf,
        b[9]=notf,
        b[10]=notf,
        b[11]=notf,
        b[12]=notf,
        b[13]=notf,
        b[14]=notf,
        b[15]=notf,
        out=yandNotf
    );

    And16(a=xandNotf, b=yandNotf, out=outAnd);

    Or16(a=outAdd, b=outAnd,
        out[0]=outF0,
        out[1]=outF1,
        out[2]=outF2,
        out[3]=outF3,
        out[4]=outF4,
        out[5]=outF5,
        out[6]=outF6,
        out[7]=outF7,
        out[8]=outF8,
        out[9]=outF9,
        out[10]=outF10,
        out[11]=outF11,
        out[12]=outF12,
        out[13]=outF13,
        out[14]=outF14,
        out[15]=outF15,
    );

    // no chip
    Xor(a=outF0, b=no, out=out[0]);
    Xor(a=outF1, b=no, out=out[1]);
    Xor(a=outF2, b=no, out=out[2]);
    Xor(a=outF3, b=no, out=out[3]);
    Xor(a=outF4, b=no, out=out[4]);
    Xor(a=outF5, b=no, out=out[5]);
    Xor(a=outF6, b=no, out=out[6]);
    Xor(a=outF7, b=no, out=out[7]);
    Xor(a=outF8, b=no, out=out[8]);
    Xor(a=outF9, b=no, out=out[9]);
    Xor(a=outF10, b=no, out=out[10]);
    Xor(a=outF11, b=no, out=out[11]);
    Xor(a=outF12, b=no, out=out[12]);
    Xor(a=outF13, b=no, out=out[13]);
    Xor(a=outF14, b=no, out=out[14]);
    Xor(a=outF15, b=no, out=out[15]);

    // no chip + zr
    Xor(a=outF0, b=no, out=outForzr0);
    Xor(a=outF1, b=no, out=outForzr1);
    Xor(a=outF2, b=no, out=outForzr2);
    Xor(a=outF3, b=no, out=outForzr3);
    Xor(a=outF4, b=no, out=outForzr4);
    Xor(a=outF5, b=no, out=outForzr5);
    Xor(a=outF6, b=no, out=outForzr6);
    Xor(a=outF7, b=no, out=outForzr7);
    Xor(a=outF8, b=no, out=outForzr8);
    Xor(a=outF9, b=no, out=outForzr9);
    Xor(a=outF10, b=no, out=outForzr10);
    Xor(a=outF11, b=no, out=outForzr11);
    Xor(a=outF12, b=no, out=outForzr12);
    Xor(a=outF13, b=no, out=outForzr13);
    Xor(a=outF14, b=no, out=outForzr14);
    Xor(a=outF15, b=no, out=outForzr15);

    Or(a=outForzr0, b=outForzr1, out=zero1);
    Or(a=zero1, b=outForzr2, out=zero2);
    Or(a=zero2, b=outForzr3, out=zero3);
    Or(a=zero3, b=outForzr4, out=zero4);
    Or(a=zero4, b=outForzr5, out=zero5);
    Or(a=zero5, b=outForzr6, out=zero6);
    Or(a=zero6, b=outForzr7, out=zero7);
    Or(a=zero7, b=outForzr8, out=zero8);
    Or(a=zero8, b=outForzr9, out=zero9);
    Or(a=zero9, b=outForzr10, out=zero10);
    Or(a=zero10, b=outForzr11, out=zero11);
    Or(a=zero11, b=outForzr12, out=zero12);
    Or(a=zero12, b=outForzr13, out=zero13);
    Or(a=zero13, b=outForzr14, out=zero14);
    Or(a=zero14, b=outForzr15, out=notZr);
    Not(in=notZr, out=zr);

    // no chip + ng 
    Xor(a=outF15, b=no, out=ng);
}