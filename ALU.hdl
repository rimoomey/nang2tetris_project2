// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        // nx chip
    Xor(a=x[0], b=nx, out=negx0);
    Xor(a=x[1], b=nx, out=negx1);
    Xor(a=x[2], b=nx, out=negx2);
    Xor(a=x[3], b=nx, out=negx3);
    Xor(a=x[4], b=nx, out=negx4);
    Xor(a=x[5], b=nx, out=negx5);
    Xor(a=x[6], b=nx, out=negx6);
    Xor(a=x[7], b=nx, out=negx7);
    Xor(a=x[8], b=nx, out=negx8);
    Xor(a=x[9], b=nx, out=negx9);
    Xor(a=x[10], b=nx, out=negx10);
    Xor(a=x[11], b=nx, out=negx11);
    Xor(a=x[12], b=nx, out=negx12);
    Xor(a=x[13], b=nx, out=negx13);
    Xor(a=x[14], b=nx, out=negx14);
    Xor(a=x[15], b=nx, out=negx15);

    Add16(
        a[0]=negx0, b[0]=nx,
        a[1]=negx1,
        a[2]=negx2,
        a[3]=negx3,
        a[4]=negx4,
        a[5]=negx5,
        a[6]=negx6,
        a[7]=negx7,
        a[8]=negx8,
        a[9]=negx9,
        a[10]=negx10,
        a[11]=negx11,
        a[12]=negx12,
        a[13]=negx13,
        a[14]=negx14,
        a[15]=negx15,
        out=out
    );
}